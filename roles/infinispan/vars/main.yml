---
# required variables
infinispan_supervisor_password: ''
infinispan_users: []

# internal variables
infinispan_rest_cache_api_path: /rest/v2/caches/ # noqa no_unspecified_argument

infinispan_rhn_ids:
  '8.2.0': '98151'  # noqa vars_in_vars_files_have_valid_names
  '8.2.2': '103685' # noqa vars_in_vars_files_have_valid_names
  '8.2.3': '103907' # noqa vars_in_vars_files_have_valid_names
  '8.3.0': '104135' # noqa vars_in_vars_files_have_valid_names
  '8.3.1': '104475' # noqa vars_in_vars_files_have_valid_names
  '8.4.0': '104901' # noqa vars_in_vars_files_have_valid_names

infinispan_supervisor:
  name: 'supervisor'
  password: "{{ infinispan_supervisor_password }}"
  roles: 'admin'

infinispan:
  home: "{{ infinispan_installation_path }}"
  version: "{{ infinispan_version }}"
  bundle: "{{ infinispan_bundle }}"
  installation_path: "{{ infinispan_installation_path }}"
  bind_addr: "{{ infinispan_bind_address }}"
  port: "{{ infinispan_port + infinispan_port_offset }}"
  jgroups_bind_addr: "{{ infinispan_jgroups_override_bind_addr | default(ansible_all_ipv4_addresses[0] if ansible_all_ipv4_addresses is defined else '127.0.0.1') }}"
  jgroups_port: "{{ infinispan_jgroups_port + infinispan_port_offset }}"
  jgroups_relay_port: "{{ infinispan_jgroups_relay_port + infinispan_port_offset }}"
  config:
    name: "infinispan.xml"
    template: "{{ infinispan_config_override_template | default('templates/infinispan.xml.j2') }}"
    jgroups_template: "{{ infinispan_config_jgroups_override_template | default('templates/jgroups-jdbcping.xml.j2') }}"
    users: "users.properties"
    groups: "groups.properties"
  user:
    name: "{{ infinispan_service_user }}"
  group:
    name: "{{ infinispan_service_group }}"
  service:
    name: "{{ infinispan_service_name }}"
    unit_dir: /etc/systemd/system
    unit_file: "{{ infinispan_service_name if infinispan_port_offset == 0 else (infinispan_service_name + '-' + infinispan_port_offset | string) }}"
  users: "{{ [ infinispan_supervisor ] + infinispan_users }}"
  static_caches: "{{ infinispan_caches }}"
  name: "{{ infinispan_service_desc }}"

infinispan_jgroups_jdbc:
  mariadb:
    enabled: "{{ infinispan_jgroups_jdbcping and infinispan_jdbc_engine == 'mariadb' }}"
    driver_class: org.mariadb.jdbc.Driver
    driver_version: "{{ infinispan_jdbc_driver_version | default('2.7.4') }}"
    driver_jar_filename: "mariadb-java-client-{{ infinispan_jdbc_driver_version }}.jar"
    driver_jar_url: "https://repo1.maven.org/maven2/org/mariadb/jdbc/mariadb-java-client/{{ infinispan_jdbc_driver_version }}/mariadb-java-client-{{ infinispan_jdbc_driver_version }}.jar"
    connection_url: "{{ infinispan_jdbc_url | default('jdbc:mariadb://localhost:3306/keycloak') }}"
    db_user: "{{ infinispan_jdbc_user }}"
    db_password: "{{ infinispan_jdbc_pass }}"
    initialize_sql: >
      CREATE TABLE IF NOT EXISTS JGROUPSPING (
        own_addr varchar(200) NOT NULL,
        cluster_name varchar(200) NOT NULL,
        updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        ping_data varbinary(5000) DEFAULT NULL,
        PRIMARY KEY (own_addr, cluster_name))
      ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin
  postgres:
    enabled: "{{ infinispan_jgroups_jdbcping and infinispan_jdbc_engine == 'postgres' }}"
    driver_class: org.postgresql.Driver
    driver_version: "{{ infinispan_jdbc_driver_version | default('9.4.1212') }}"
    driver_jar_filename: "postgresql-{{ infinispan_jdbc_driver_version }}.jar"
    driver_jar_url: "https://repo.maven.apache.org/maven2/org/postgresql/postgresql/{{ infinispan_jdbc_driver_version }}/postgresql-{{ infinispan_jdbc_driver_version }}.jar"
    connection_url: "{{ infinispan_jdbc_url | default('jdbc:postgresql://localhost:5432/keycloak') }}"
    db_user: "{{ infinispan_jdbc_user }}"
    db_password: "{{ infinispan_jdbc_pass }}"
    initialize_sql: >
      CREATE TABLE IF NOT EXISTS JGROUPSPING (
        own_addr varchar(200) NOT NULL,
        cluster_name varchar(200) NOT NULL,
        updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        ping_data BYTEA,
        constraint PK_JGROUPSPING PRIMARY KEY (own_addr, cluster_name))
  sqlserver:
    enabled: "{{ infinispan_jgroups_jdbcping and infinispan_jdbc_engine == 'sqlserver' }}"
    driver_class: com.microsoft.sqlserver.jdbc.SQLServerDriver
    driver_version: "{{ infinispan_jdbc_driver_version | default('9.2.0') }}"
    driver_jar_filename: "mssql-java-client-{{ infinispan_jdbc_driver_version }}.jar"
    driver_jar_url: "https://repo1.maven.org/maven2/com/microsoft/sqlserver/mssql-jdbc/{{ infinispan_jdbc_driver_version }}.jre11/mssql-jdbc-{{ infinispan_jdbc_driver_version }}.jre11.jar" # e.g., https://repo1.maven.org/maven2/com/microsoft/sqlserver/mssql-jdbc/12.2.0.jre11/mssql-jdbc-12.2.0.jre11.jar
    connection_url: "{{ infinispan_jdbc_url | default('jdbc:postgresql://localhost:5432/keycloak') }}"
    db_user: "{{ infinispan_jdbc_user }}"
    db_password: "{{ infinispan_jdbc_pass }}"
    initialize_sql: >
      IF  NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[JGROUPSPING]') AND type in (N'U'))
      BEGIN
        CREATE TABLE JGROUPSPING (
          own_addr varchar(200) NOT NULL,
          cluster_name varchar(200) NOT NULL,
          updated DATETIME2 DEFAULT SYSUTCDATETIME(),
          ping_data varbinary(5000) DEFAULT NULL,
          PRIMARY KEY (own_addr, cluster_name))
      END

infinispan_keycloak_cache:
  enabled: "{{ infinispan_keycloak_caches }}"
  caches:
    - sessions
    - offlineSessions
    - clientSessions
    - offlineClientSessions
    - loginFailures
    - actionTokens
    - authenticationSessions

infinispan_keystore:
  enabled: "{{ infinispan_default_realm_tls }}"
  path: "{{ infinispan_keystore_path }}"
  password: "{{ infinispan_keystore_password }}"
  key_password: "{{ infinispan_keystore_key_password }}"
  alias: "{{ infinispan_keystore_alias }}"

infinispan_logging:
  file_format: "{{ infinispan_logfile_format }}"
  root_level: "{{ infinispan_logfile_root_level }}"
  audit: "{{ 'INFO' if infinispan_logfile_enable_audit else 'ERROR' }}"
  hotrod: "{{ 'TRACE' if infinispan_logfile_enable_hotrod_accesslog else 'INFO' }}"
  rest: "{{ 'TRACE' if infinispan_logfile_enable_rest_accesslog else 'INFO' }}"
  size_based_limit: "{{ infinispan_logfile_maxsize }}"
  log_pattern: '%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p (%t) [%c] %m%throwable%n'
  log_pattern_console: "{{ '%highlight{' + '%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p (%t) [%c] %m%throwable}' + '{INFO=normal, DEBUG=normal, TRACE=normal}%n' }}"
  accesslog_pattern: '%X{address} %X{user} [%d{dd/MMM/yyyy:HH:mm:ss Z}] &quot;%X{method} %m %X{protocol}&quot; %X{status} %X{requestSize} %X{responseSize} %X{duration}%n'
  auditlog_pattern: '%d{yyyy-MM-dd HH:mm:ss,SSS} %m%n'
  file_rotate_pattern: '%d{yyyy-MM-dd}-%i'
  json_timestamp: '$${date:yyyy-MM-dd''T''HH:mm:ss.SSSZ}'
  loggers:
    - { name: com.arjuna, level: WARN }
    - { name: io.netty.handler.ssl.ApplicationProtocolNegotiationHandler, level: ERROR }
